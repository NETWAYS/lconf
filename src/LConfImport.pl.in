#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2015 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.

=head1 NAME

LConfImport.pl - import an existing Nagios / Icinga config into LConf

=head1 SYNOPSIS

LConfImport.pl  -o <path to objects.cache>
                [-v]
                [-h]
                [-V]

Import an existing Nagios / Icinga config

=head1 OPTIONS

=over

=item -o|--objectscache <path to objects.cache>

Path to existing Nagios Objects Cache; if specified script will import whole objects.cache into ldap

=item -c|--cleanup <ldap dn>

LDAP DN in which cleanup should start; eg. ou=Main,ou=NagiosConfig,ou=LConf,dc=icinga,dc=test

=item -v|--verbose <path to logfile>

Verbose mode. If no logfile is specified, verbose output will be printend to STDOUT

=item -h|--help

print help page

=item -V|--version

print plugin version

=cut

# set libs
use lib '@PREFIX@';

# includes
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use Net::LDAP;
use Net::LDAP::Entry;
use POSIX;

# lconf includes
use lib '@SYSCONF_DIR@';
use config;

use lib '@LIB_DIR@';
use ldap;
use generate;
use misc;

# version string
my $version = '@VERSION@';

# define states
our @state = ('OK', 'WARNING', 'ERROR', 'UNKNOWN');

# get command-line parameters
our $opt;
GetOptions(
    "o|objectscache=s"  => \$opt->{objectsCache},
    "c|cleanup=s"       => \$opt->{cleanup},
    "v|verbose:s"       => \$opt->{verbose},
    "h|help"            => \$opt->{help},
    "V|version"         => \$opt->{version}
  );

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# help and version page
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# should print version?
if (defined $opt->{version}) { print $version."\n"; exit 0; }

# should print help?
if ($opt->{help}) { pod2usage(1); }

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# let's go!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# define vars
use vars qw($cfg %itemMap);
my @OBJECTSCACHE;
my (@ID_TIMEPERIODS, @ID_CONTACTS, @ID_CONTACTGROUPS, @ID_HOSTS, @ID_HOSTGROUPS, @ID_COMMANDS, @ID_SERVICES);
my ($TIMEPERIODS, $CONTACTS, $CONTACTGROUPS, $HOSTS, $HOSTGROUPS, $COMMANDS, $SERVICES);
my $COMPARE_GROUPS;

our $exit; $exit->{code} = 0; $exit->{message} = 'No errors';

# First of all... check if we're ready to run
LeaveScript(2, "Variable '\$cfg->{ldap}->{server}' not set in config.pm'") if !$cfg->{ldap}->{server};
LeaveScript(2, "Variable '\$cfg->{ldap}->{rootDN} not set in config.pm'")      if !$cfg->{ldap}->{rootDN};

# set up dn's
$cfg->{ldap}->{importDN} = 'ou=Import,'.$cfg->{ldap}->{rootDN};                    # import DN
$cfg->{ldap}->{workDN}   = $cfg->{export}->{exportDN}.','.$cfg->{ldap}->{rootDN};   # work DN (where the config lives)
my $targetDN = $cfg->{ldap}->{workDN};                                          # for later use

# reorganize %itemMap
our $newItemMap;
foreach(keys %itemMap) {
    if ($_ !~ /escalation/i) {
        $newItemMap->{$itemMap{$_}}->{$_} = $_;
    }
}

# add special cn's
$newItemMap->{'timeperiod_name'}->{'cn'} = 'cn';
$newItemMap->{'command_name'}->{'cn'} = 'cn';
$newItemMap->{'contact_name'}->{'cn'} = 'cn';
$newItemMap->{'host_name'}->{'cn'} = 'cn';

# connect to ldap
our $ldap = LDAPconnect('login');

# if '$optObjectsCache' is specified => run import
if ($opt->{objectsCache}) {

    # specified file is available?
    LeaveScript(2, "'$opt->{objectsCache}' is not a available") if !-f $opt->{objectsCache};

    # read objects.cache
    open(IN,"<$opt->{objectsCache}");
    while(<IN>) {
        @OBJECTSCACHE = <IN>;
    }
    close(IN);
    beVerbose("OBJECTS CACHE", "work with file '$opt->{objectsCache}'");

    # filter stuff from objects cache
    # get entry points for each item
    my $counter = 0;
    foreach(@OBJECTSCACHE) {
        push(@ID_TIMEPERIODS, $counter)         if $_ =~ /define timeperiod\s+/;
        push(@ID_CONTACTS, $counter)            if $_ =~ /define contact\s+/;
        push(@ID_CONTACTGROUPS, $counter)       if $_ =~ /define contactgroup\s+/;
        push(@ID_HOSTS, $counter)               if $_ =~ /define host\s+/;
        push(@ID_HOSTGROUPS, $counter)          if $_ =~ /define hostgroup\s+/;
        push(@ID_COMMANDS, $counter)            if $_ =~ /define command\s+/;
        push(@ID_SERVICES, $counter)            if $_ =~ /define service\s+/;

        $counter++;
    }

    # get full items
    $TIMEPERIODS    = getItems(@ID_TIMEPERIODS);            beVerbose("OBJECTS CACHE", "TIMEPERIODS imported");
    $CONTACTS       = getItems(@ID_CONTACTS);               beVerbose("OBJECTS CACHE", "CONTACTS imported");
    $CONTACTGROUPS  = getItems(@ID_CONTACTGROUPS);          beVerbose("OBJECTS CACHE", "CONTACTGROUPS imported");
    $HOSTS          = getItems(@ID_HOSTS);                  beVerbose("OBJECTS CACHE", "HOSTS imported");
    $HOSTGROUPS     = getItems(@ID_HOSTGROUPS);             beVerbose("OBJECTS CACHE", "HOSTGROUPS imported");
    $COMMANDS       = getItems(@ID_COMMANDS);               beVerbose("OBJECTS CACHE", "COMMANDS imported");
    $SERVICES       = getServiceItems(@ID_SERVICES);        beVerbose("OBJECTS CACHE", "SERVICES imported");

    # write lconf config to ldap
    # timeperiods
    # set target folder
    $targetDN = 'ou=timeperiods,'.$cfg->{ldap}->{workDN};

    # check folder
    checkDN($targetDN);

    foreach my $timeperiod (keys %{$TIMEPERIODS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$timeperiod,$targetDN");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Timeperiod");
        beVerbose("LDAP ADD", "cn=$timeperiod,$targetDN");

        foreach(keys %{$TIMEPERIODS->{$timeperiod}}) {
            if (grep { /$_/ } values %{$newItemMap->{$_}}) {
                $entry->add(values %{$newItemMap->{$_}} => "$TIMEPERIODS->{$timeperiod}->{$_}");
            } else {
                $entry->add("$cfg->{ldap}->{prefix}TimeperiodValue" => "$_ $TIMEPERIODS->{$timeperiod}->{$_}");
            }
        }

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: timeperiod ".$timeperiod."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # commands
    # set target folder
    $targetDN = 'ou=commands,'.$cfg->{ldap}->{workDN};

    # check folder
    checkDN($targetDN);

    foreach my $command (keys %{$COMMANDS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$command,$targetDN");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Command");
        beVerbose("LDAP ADD", "cn=$command,$targetDN");

        foreach(keys %{$COMMANDS->{$command}}) {

            # convert command to utf-8 and add to entry
            utf8::encode($COMMANDS->{$command}->{$_});
            $entry->add(values %{$newItemMap->{$_}} => "$COMMANDS->{$command}->{$_}") if values %{$newItemMap->{$_}};
        }

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: command ".$command."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # contacts
    # set target folder
    $targetDN = 'ou=contacts,'.$cfg->{ldap}->{workDN};

    # check folder
    checkDN($targetDN);

    foreach my $contact (keys %{$CONTACTS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$contact,$targetDN");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Contact");
        beVerbose("LDAP ADD", "cn=$contact,$targetDN");

        foreach(keys %{$CONTACTS->{$contact}}) {
            $entry->add(values %{$newItemMap->{$_}} => "$CONTACTS->{$contact}->{$_}") if values %{$newItemMap->{$_}};
        }

        if(!defined($CONTACTS->{$contact}->{'alias'})) {
            $entry->add("lconfalias" => "$CONTACTS->{$contact}->'contact_name'");
        }

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: contact ".$contact."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # contactgroup
    # set target folder
    $targetDN = 'ou=contactgroups,'.$cfg->{ldap}->{workDN};

    # check folder
    checkDN($targetDN);

    foreach my $contactgroup (keys %{$CONTACTGROUPS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$contactgroup,$targetDN");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Contactgroup");
        $entry->add(cn => "$contactgroup");
        beVerbose("LDAP ADD", "cn=$contactgroup,$targetDN");

        foreach(keys %{$CONTACTGROUPS->{$contactgroup}}) {
            $entry->add(values %{$newItemMap->{$_}} => "$CONTACTGROUPS->{$contactgroup}->{$_}") if values %{$newItemMap->{$_}};
        }

        if(!defined($CONTACTGROUPS->{$contactgroup}->{'alias'})) {
            $entry->add("lconfalias" => "$CONTACTGROUPS->{$contactgroup}->'contactgroup_name'");
        }

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: contactgroup ".$contactgroup."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # hostgroups
    # set target folder
    $targetDN = 'ou=hostgroups,'.$cfg->{ldap}->{workDN};

    # check folder
    checkDN($targetDN);

    foreach my $hostgroup (keys %{$HOSTGROUPS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$hostgroup,$targetDN");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Hostgroup");
        $entry->add(cn => "$hostgroup");
        beVerbose("LDAP ADD", "cn=$hostgroup,$targetDN");

        foreach(keys %{$HOSTGROUPS->{$hostgroup}}) {
            $entry->add(values %{$newItemMap->{$_}} => "$HOSTGROUPS->{$hostgroup}->{$_}") if values %{$newItemMap->{$_}};
        }

        if(!defined($HOSTGROUPS->{$hostgroup}->{'alias'})) {
            $entry->add("lconfalias" => "$HOSTGROUPS->{$hostgroup}->'hostgroup_name'");
        }

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: hostgroup ".$hostgroup."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # hosts
    # check folder
    checkDN($cfg->{ldap}->{importDN});

    foreach my $host (keys %{$HOSTS}) {

        # create new object
        my $entry = Net::LDAP::Entry->new;
        $entry->dn("cn=$host,$cfg->{ldap}->{importDN}");
        $entry->add(objectClass => "$cfg->{ldap}->{prefix}Host");
        beVerbose("LDAP ADD", "cn=$host,$cfg->{ldap}->{importDN}");

        my $address_found = undef;
        foreach(keys %{$HOSTS->{$host}}) {
            if (values %{$newItemMap->{$_}}) {
                my $attName = getRightAttributeType($newItemMap->{$_}, 'host');
                $address_found = 1 if ($_ =~ /address/);
                $entry->add($attName => "$HOSTS->{$host}->{$_}");
            } elsif ($_ =~ /^_/){
                $entry->add("$cfg->{ldap}->{prefix}hostcustomvar" => "$_ $HOSTS->{$host}->{$_}");
            }
        }

        $entry->add("$cfg->{ldap}->{prefix}address" => "$host") if (!$address_found);

        # update ldap
        my $result = $entry->update($ldap);

        if ($result->code == 68) {
            beVerbose("LDAP ADD", "WARNING: host ".$host."already exists, skipping - CODE: ".$result->code." - ".$result->error);
            next;
        }

        if ($result->code != 0) {
            beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
            $exit->{code} = 2; $exit->{message} = $result->error;
            goto EXIT;
        }
    }

    # services
    foreach my $host (keys %{$SERVICES}) {

        # set target folder
        $targetDN = "cn=$host,$cfg->{ldap}->{importDN}";

        foreach my $service (keys %{$SERVICES->{$host}}) {

            # create new object
            my $entry = Net::LDAP::Entry->new;
            $entry->dn("cn=$service,$targetDN");
            $entry->add(objectClass => "$cfg->{ldap}->{prefix}Service");
            $entry->add(cn => "$service");
            beVerbose("LDAP ADD", "cn=$service,$targetDN");

            foreach(keys %{$SERVICES->{$host}->{$service}}) {
                if (values %{$newItemMap->{$_}}) {
                    my $attName = getRightAttributeType($newItemMap->{$_}, 'service');

                    # convert command to utf-8 and add to entry
                    utf8::encode($SERVICES->{$host}->{$service}->{$_});
                    $entry->add($attName => "$SERVICES->{$host}->{$service}->{$_}");
                } elsif ($_ =~ /^_/){
                    $entry->add("$cfg->{ldap}->{prefix}servicecustomvar" => "$_ $SERVICES->{$host}->{$service}->{$_}");
                }
            }

            # update ldap
            my $result = $entry->update($ldap);

            if ($result->code == 68) {
                beVerbose("LDAP ADD", "WARNING: service ".$service."already exists, skipping - CODE: ".$result->code." - ".$result->error);
                next;
            }

            if ($result->code != 0) {
                beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
                $exit->{code} = 2; $exit->{message} = $result->error;
                goto EXIT;
            }
        }
    }
} elsif ($opt->{cleanup}) {
    my $result = LDAPsearch($ldap, $opt->{cleanup}, "base", "objectclass=*");
    LeaveScript(2, "Can't find '$opt->{cleanup}' in on LDAP host '$cfg->{ldap}->{server}") if !$result;

    # get all hosts
    my $CLIENTS = LDAPsearch($ldap, $opt->{cleanup}, "sub", "objectclass=$cfg->{ldap}->{prefix}Host");
    foreach my $client (keys %{$CLIENTS}) {
        $client =~ /cn=[-_.\d\w\s]*,(.*)/;
        $COMPARE_GROUPS->{$1} = $1;
    }

    # compare whole stuff
    foreach my $compare_group (keys %{$COMPARE_GROUPS}) {

        # host attributes
        compareAttributes($compare_group, "$cfg->{ldap}->{prefix}Host");

        # service attributes
        compareAttributes($compare_group, "$cfg->{ldap}->{prefix}Service");
    }
} else {
    pod2usage(1);
}

# disconnect from ldap
$ldap->unbind();

# exit
EXIT:
LeaveScript($exit->{code}, $exit->{message});

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# functions...
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

sub getItems {
    my @ID_ARRAY   = @_;
    my $hash;

    foreach(@ID_ARRAY) {

        # determine name for hashref
        $OBJECTSCACHE[$_+1] =~ m/[\w]+\s(.*)/;
        my $name = $1;

        # get all elements for this item
        my $counter   = $_;
        my $run_again = 'true';

        # decide mode: default or timeperiod?
        my $mode = 'default';
        $mode = 'timeperiod' if $OBJECTSCACHE[$counter] =~ /define timeperiod/;

        while($run_again eq 'true') {

            if ($OBJECTSCACHE[$counter] !~ /define/ && $OBJECTSCACHE[$counter] !~ /^[#;]/) {
                my ($val1, $val2);

                if ($mode eq 'timeperiod') {
                    if ($OBJECTSCACHE[$counter] =~ /timeperiod_name/ || $OBJECTSCACHE[$counter] =~ /alias/ || $OBJECTSCACHE[$counter] =~ /exclude/) {
                        $OBJECTSCACHE[$counter] =~ m/([\w]+)\s*(.*)/;
                        $val1 = $1; $val2 = $2;
                    } else {
                        $OBJECTSCACHE[$counter] =~ m/(.*)\s+([\d\W]+)/;
                        $val1 = $1; $val2 = $2;
                    }
                } else {
                    $OBJECTSCACHE[$counter] =~ m/([\w]+)\s*(.*)/;
                    $val1 = $1; $val2 = $2;
                }

                # remove the annoying inline comments after ';' or '#'
                if (defined($val2)) {
                    $val2 =~ s/\s*[;\#](.*)$//;

                    $hash->{$name}->{$val1} = $val2;
                }
            }

            $counter++;
            $run_again = 'exit' if $OBJECTSCACHE[$counter] =~ /}$/;
        }
    }

    return $hash;
}

sub getServiceItems {
    my @ID_ARRAY   = @_;
    my $hash;

    foreach(@ID_ARRAY) {

        # determine name for hashref
        $OBJECTSCACHE[$_+1] =~ m/[\w]+\s(.*)/;
        my $name1 = $1;

        $OBJECTSCACHE[$_+2] =~ m/[\w]+\s(.*)/;
        my $name2 = $1;

        # get all elements for this item
        my $counter   = $_;
        my $run_again = 'true';

        while($run_again eq 'true') {
            if ($OBJECTSCACHE[$counter] !~ /define/) {
                $OBJECTSCACHE[$counter] =~ m/([\w]+)\s*(.*)/;
                $hash->{$name1}->{$name2}->{$1} = $2 if $1 ne "host_name";
            }

            $counter++;
            $run_again = 'exit' if $OBJECTSCACHE[$counter] =~ /}$/;
        }
    }

    return $hash;
}

sub checkDN {
    my $dn = shift;
    my $to_return;

    my @path = split(/,/,$dn,2);
    my $result = LDAPsearch($ldap, $path[1], "one", $path[0]);

    if (!defined $result) {

        # get ou attribute
        $dn =~ m/(\w+)=([\w\d]+).*/;

        my $entry = Net::LDAP::Entry->new;
        $entry->dn($dn);
        $entry->add ( objectClass => "$cfg->{ldap}->{prefix}StructuralObject" );
        $entry->add ( $1 => "$2" );
        my $result = $entry->update ( $ldap );
        beVerbose("LDAP ADD", $dn);
        beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error) if $result->code != 0;
    }
}

sub getRightAttributeType {
    my $hashref     = shift;
    my $searchAfter = shift;
    my $to_return;

    if (scalar keys %{$hashref} >= 2) {
        foreach my $val1 (keys %{$hashref}) { $to_return = $val1 if $val1 =~ /$searchAfter/i; }
    } else {
        foreach my $val1 (keys %{$hashref}) { $to_return = $val1; }
    }

    return $to_return;
}

sub compareAttributes {
    my $searchDN    = shift;
    my $objectClass = shift;
    my $COMPARE;

    # get all elements in $searchDN for comparing
    my $ITEMS = LDAPsearch($ldap, $searchDN, 'sub', "objectclass=$objectClass");
    foreach my $item (keys %{$ITEMS}) {
        foreach(keys %{$ITEMS->{$item}}) {

            # exclude 'cn', 'dn' and 'objectclass'; leave them untouched
            if ($_ ne 'cn' && $_ ne 'dn' && $_ ne 'objectclass') {
                if (!defined $COMPARE->{$_}->{$ITEMS->{$item}->{$_}}) {
                    $COMPARE->{$_}->{$ITEMS->{$item}->{$_}} = 1;
                } else {
                    $COMPARE->{$_}->{$ITEMS->{$item}->{$_}}++;
                }
            }
        }
    }

    # calc threshold
    my $countItems = keys %{$ITEMS};
    my $countThreshold = ceil($countItems/2);

    # compare and create inheritance
    foreach my $val1 (keys %{$COMPARE}) {
        foreach my $val2 (keys %{$COMPARE->{$val1}}) {
            if ($COMPARE->{$val1}->{$val2} >= $countThreshold) {

                # search stuff to delete
                my $to_delete = LDAPsearch($ldap, $searchDN, "sub", "$val1=$val2");
                foreach(keys %{$to_delete}) {

                    # delete old entries
                    my $result = $ldap->modify($_, delete => { $val1 => $val2 });
                    if ($result->code != 0) {
                        beVerbose("LDAP DELETE", "ERROR - CODE: ".$result->code." - ".$result->error);
                        $exit->{code} = 2; $exit->{message} = $result->error;
                        goto EXIT;
                    }
                }

                # add entry on hirarchical top entry
                my $result = $ldap->modify($searchDN, add => { $val1 => $val2 } );
                if ($result->code != 0) {
                    beVerbose("LDAP ADD", "ERROR - CODE: ".$result->code." - ".$result->error);
                    $exit->{code} = 2; $exit->{message} = $result->error;
                    goto EXIT;
                }
            }
        }
    }
}

# vi: sw=4 ts=4 expandtab :

