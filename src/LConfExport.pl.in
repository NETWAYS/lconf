#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2015 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.

=head1 NAME

LConfExport.pl - export a Nagios / Icinga config from LConf

=head1 SYNOPSIS

LConfExport.pl   -o <output dir>
                [-v]
                [-d]
                [-f]
                [-h]
                [-V]
                [-y]
                [--full-export]
                [--format]

Export a Nagios / Icinga config from LConf

=head1 OPTIONS

=over

=item -o|--output <output dir>

Output dir for config

=item -e|--exportdn <dn path below LConf>

The DN where to start the export, this overrides the config option exportDN

=item -v|--verbose [<path to logfile>]

Verbose mode. If no logfile specified, verbose output will be printed to STDOUT

=item -d|--debug [<path to logfile>]

Debug mode. If no logfile specified, debug output will be printed to STDOUT

=item --full-export

Overwrite the diff export parameter and do a full export

=item --format <1|2>

Overwrite config export format. 1 for Icinga 1.x / Nagios 3.x, 2 for Icinga 2.x

=item -f|--filter <hostname>

Export only this host (e.g. for debugging)

=item -y|--yes

Answer every question with yes

=item -h|--help

print help page

=item -V|--version

print plugin version

=cut

# basic perl includes
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use File::Basename;
use Net::LDAP;
use Data::Dumper;
use POSIX qw/strftime/;
use Fcntl qw(:flock);
use Storable qw(dclone);
use Scalar::Util qw/reftype/;

# lconf includes
use lib '@SYSCONF_DIR@';
use config;

use lib '@LIB_DIR@';
use ldap;
use generate;
use misc;

# version string
my $version = '@VERSION@';

# define states
our @state = ('OK', 'WARNING', 'ERROR', 'UNKNOWN');

# get command-line parameters
our $opt;
GetOptions(
    "o|output=s"    => \$opt->{outputDir},
    "e|exportdn=s"  => \$opt->{exportDN},
    "v|verbose:s"   => \$opt->{verbose},
    "d|debug:s"     => \$opt->{debug},
    "debug-verbosity:s"     => \$opt->{debug_verbosity},
    "full-export:s" => \$opt->{fullExport},
    "format:s"      => \$opt->{format},
    "f|filter=s"    => \$opt->{filter},
    "y|yes"         => \$opt->{yes},
    "h|help"        => \$opt->{help},
    "V|version"     => \$opt->{version}
  );

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# help and version page
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# should print version?
if (defined $opt->{version}) { print $version."\n"; exit 0; }

# should print help?
if ($opt->{help} || !$opt->{outputDir}) { pod2usage(1); }

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# let's go!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# define vars
use vars qw($cfg %itemMap);
our $exit; $exit->{code} = 0; $exit->{message} = 'No errors';

$opt->{debug_verbosity} = 1 if(!defined $opt->{debug_verbosity});

# override format when set via commandline
if(defined $opt->{format}) {
    $cfg->{export}->{format} = $opt->{format};
}

# override exportDN when set via commandline
if(defined $opt->{exportDN}) {
    $cfg->{export}->{exportDN} = $opt->{exportDN};
}

$cfg->{ldap}->{baseDN} = $cfg->{export}->{exportDN}.','.$cfg->{ldap}->{rootDN};

# First of all... check if we're ready to run
LeaveScript(2, "Variable '\$cfg->{ldap}->{server}' not set in config.pm'")     if !$cfg->{ldap}->{server};
LeaveScript(2, "Variable '\$cfg->{ldap}->{rootDN}' not set in config.pm'")     if !$cfg->{ldap}->{rootDN};
LeaveScript(2, "Variable '\$cfg->{export}->{user}' not set in config.pm'")    if !$cfg->{export}->{user};
LeaveScript(2, "Variable '\$cfg->{export}->{exportDN}' not set in config.pm'")    if !$cfg->{export}->{exportDN};
LeaveScript(2, "Variable '\$cfg->{export}->{treerewrite}' not set in config.pm'")    if !$cfg->{export}->{treerewrite};

# export with right user?
LeaveScript(2, "You're not user '$cfg->{export}->{user}'!") if $ENV{USER} ne $cfg->{export}->{user};

# check output dir
LeaveScript('2', "'$opt->{outputDir}' is not a directory") if !-d $opt->{outputDir};
LeaveScript('2', "'$opt->{outputDir}' is not writeable")   if !-w $opt->{outputDir};

# set lockfile, if not set otherwise via config
if(!defined($cfg->{export}->{lock})) {
    $cfg->{export}->{lock} = $opt->{outputDir}.'/LConfExport.lock';
}

# set hashdump file
if(!defined($cfg->{export}->{hashdump})) {
    $cfg->{export}->{hashdump} = $opt->{outputDir}.'/LConfExport.hashdump';
}

# set timestamp file
if(!defined($cfg->{export}->{timestamp})) {
    $cfg->{export}->{timestamp} = $opt->{outputDir}.'/LConfExport.timestamp';
}

# set master config manipulation
if(!defined($cfg->{export}->{enablemidmaster})) {
    $cfg->{export}->{enablemidmaster} = 0;
}

# export already running?
open(LOCK, ">$cfg->{export}->{lock}") or LeaveScript(2, "Cannot open $cfg->{export}->{lock}");
flock(LOCK, LOCK_EX|LOCK_NB) or LeaveScript(2, "LConfExport locked! Someone is already using it!");

# clean old output dir
DebugOutput('REMOVE OLD CONFIG', "start - folder: $opt->{outputDir}", 1);

# check if output dir is already labeled?
if (!-f "$opt->{outputDir}/lconf.incomplete" && !-f "$opt->{outputDir}/lconf.identify" && !defined $opt->{yes}) {
    print "It looks like you generate a config into '$opt->{outputDir}' for the first time.\n";
    print "May lconf delete the folder content?\n\n";
    print "execute 'rm -r $opt->{outputDir}/*' (y/n) ";
    my $result = <STDIN>;
    print "\n";
    LeaveScript('3', "Directory cleanup canceled...") if $result =~ /^n/i;
}

# delete everything inside the outputDir
qx(rm -r $opt->{outputDir}/* 2>/dev/null);
DebugOutput('REMOVE OLD CONFIG', "finished - folder: $opt->{outputDir}", 1);

# create identifier for incomplete exports
open(FH, ">$opt->{outputDir}/lconf.incomplete") || die "Can't write data: $opt->{outputDir}/lconf.incomplete $!\n"; close(FH);

#
# NOW, WE'RE READY TO RUN :)
#
beVerbose("START", "LConfExport $version");

# connect to LDAP server
our $ldap;
if ($cfg->{ldap}->{binddn} && $cfg->{ldap}->{bindpw}) {
    $ldap = LDAPconnect('auth');
} else {
    $ldap = LDAPconnect();
}

# get last timestamp
my $timestamp;
if (-f $cfg->{export}->{timestamp}) {
    open(FH, "<$cfg->{export}->{timestamp}") || die "Can't read data: $cfg->{export}->{timestamp}$!\n";
    $timestamp = <FH>;
    chomp($timestamp);
    close(FH);
}

# set timestamp
open(FH, "+>$cfg->{export}->{timestamp}") || die "Can't write data: $cfg->{export}->{timestamp}$!\n";
print FH strftime('%Y%m%d%H%M%SZ',localtime(time-3600));
close(FH);

# get the whole config from ldap
my $CONFIG = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "objectclass=*");

# search last modified items
my $DIFF_EXPORT = ();
if (defined $cfg->{export}->{onlydiffs} && $cfg->{export}->{onlydiffs} == 1 && !defined $opt->{fullExport}) {
    my $LASTMODIFIED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "(|(modifyTimestamp>=$timestamp)(createTimestamp>=$timestamp))");
    foreach my $val1 (keys %{$LASTMODIFIED}) {
        my $QUEUE;

        if ($LASTMODIFIED->{$val1}->{objectclass} =~ /$cfg->{ldap}->{prefix}Host/i) {
            $DIFF_EXPORT->{$LASTMODIFIED->{$val1}->{dn}} = $LASTMODIFIED->{$val1}->{dn};
        } else {

            # search for links
            # split and reverse the DN
            my $searchDN = $val1;
            $searchDN =~ s/,$cfg->{ldap}->{rootDN}//;
            my @search = split(",", $searchDN);
            @search = reverse(@search);

            # search at rootDN...
            $searchDN = $cfg->{ldap}->{rootDN};
            my $LINKED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "aliasedobjectname=$searchDN");
            foreach my $link (keys %{$LINKED}) { $link =~ s/^ou=//; $QUEUE->{$link} = $link; }

            # ...and search rest of the three
            foreach (@search) {
                $searchDN = $_.",".$searchDN;
                my $LINKED = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "aliasedobjectname=$searchDN");
                foreach my $link (keys %{$LINKED}) { $link =~ s/^ou=//;  $QUEUE->{$link} = $link; }
            }

            if ($LASTMODIFIED->{$val1}->{objectclass} =~ /alias/i || $LASTMODIFIED->{$val1}->{objectclass} =~ /extensibleObject/i) { $val1 =~ s/^ou=//; }

            $QUEUE->{$val1} = $val1;

            foreach my $do (keys %{$QUEUE}) {
                my @splitted = split('ou=', $do, 2);
                if ($#splitted == 1) { $do = 'ou='.$splitted[1]; } else { $do = 'ou='.$splitted[0]; }

                my $TMP_HOSTS = LDAPsearch($ldap, $do, "sub", "objectclass=$cfg->{ldap}->{prefix}Host");
                foreach (keys %{$TMP_HOSTS}) {
                    $DIFF_EXPORT->{$_} = $_;
                }
            }
        }
    }
}

# get all clients to monitor
my $CLIENTS = HashGrep($CONFIG, 'objectclass', $cfg->{ldap}->{prefix}.'Host$');

# modify $CLIENTS if $cfg->{export}->{onlydiffs} was set
if ($cfg->{export}->{onlydiffs}) {
    foreach my $client (keys %{$CLIENTS}) {
        delete $CLIENTS->{$client} if !defined $DIFF_EXPORT->{$client};
    }
}

# modify $CLIENTS if a filter was set
if (defined $opt->{filter}) { my $tmp_hash = HashGrep($CLIENTS, 'cn', $opt->{filter}); $CLIENTS = $tmp_hash; }

# drop all hosts obove baseDN (eg. examples)
foreach my $client (keys %{$CLIENTS}) {
    delete $CLIENTS->{$client} if $client !~ /$cfg->{ldap}->{baseDN}$/;
}

# run custom script (pre)
if (-f '@EXPORT_SCRIPT_DIR@/pre.pl') {
    require '@EXPORT_SCRIPT_DIR@/pre.pl';
    $CLIENTS = CustomPre($CLIENTS);
}

# prepare directories for the .cfg files
createDirs($cfg->{ldap}->{baseDN}, $opt->{outputDir});  # TODO: Umbauen damit er ohne LDAPsearch funktioniert??
mkdir("$opt->{outputDir}/hostgroups/");
mkdir("$opt->{outputDir}/servicegroups/");
mkdir("$opt->{outputDir}/serviceescalations/");
mkdir("$opt->{outputDir}/hostescalations/");

if(defined($cfg->{export}->{format}) && $cfg->{export}->{format} == 2) {
    copyGeneric("@SYSCONF_DIR@/default-templates.conf", $opt->{outputDir});
} else {
    copyGeneric("@SYSCONF_DIR@/default-templates.cfg", $opt->{outputDir});
}

## Start (TreeBuilder, BuildHostConfig) for each client
foreach my $client (keys %{$CLIENTS}) {

    # create new child
    #my $pid = $pm->start($client) and next;

    beVerbose("$$ CFG BUILD", "Host $client");
    my %TREE = ();

    # start with level 0
    %TREE = TreeBuilder($client, $CONFIG, \%TREE, 0);
    $CLIENTS = BuildHostConfig($client, $CLIENTS, \%TREE);
}

# run custom script (mid)
# it is important that the mid script runs after all childs are finished (after
# TreeBuilder and BuildHostConfig), because some mid scripts need the whole
# config.
if (-f '@EXPORT_SCRIPT_DIR@/mid.pl') {
    require '@EXPORT_SCRIPT_DIR@/mid.pl';
    $CLIENTS = CustomMid($CLIENTS);
}

# Using $CLIENTS_REF as reference to $CLIENTS for generating the config
# If midmasterscripts are allowed we bend the reference to a clone of $CLIENTS so
# $CLIENTS itself is untoched and could be used for the dumpexport
my $CLIENTS_REF = $CLIENTS;

# generating the {host,service}groups before genHostConfig and midmaster, because
# they are manipulating the $CLIENTS has
genHostgroups($CONFIG, $CLIENTS);
genServicegroups($CONFIG, $CLIENTS);

# run custom script mid-master, if allowed
# check if our mid-master.pl is allowed to change the master config
if ($cfg->{export}->{enablemidmaster} == 1) {

    if (-f '@EXPORT_SCRIPT_DIR@/mid-master.pl') {

        # create a copy of modified config just for the master
        $CLIENTS_REF = dclone($CLIENTS);
        require '@EXPORT_SCRIPT_DIR@/mid-master.pl';
        $CLIENTS_REF = CustomMidMaster($CLIENTS_REF);
    }
}

# Generating the .cfg files could be done in childs but this is slower as
# generate the .cfg files in the parent process!
# We are using $CLIENTS_REF instead of $CLIENTS! $CLIENTS_REF could be a
# reference to $CLIENTS or a reference to a clone of $CLIENTS (if midmaster ist
# enable,see above)
foreach my $client (keys %{$CLIENTS_REF}) {

    # generate config for one client
    genHostConfig($CONFIG, $CLIENTS_REF, $client);
}

# we are using $CLIENTS NOT $CLIENTS_REF, because the *.cfg for the hosts are
# already generated. This is important for the hashdump, because the hashdump is
# used by LConfSlaveExport

# generate the rest of the config.
# genHostConfig may add aditional commands for notifications/eventhandlers
genTimeperiods($CONFIG);
genCommands($CONFIG);
genContacts($CONFIG);
genContactgroups($CONFIG);

# run custom script (post)
if (-f '@EXPORT_SCRIPT_DIR@/post.pl') {
    require '@EXPORT_SCRIPT_DIR@/post.pl';
    $CLIENTS = CustomPost($CLIENTS);
}

# create identifier
open(FH, ">$opt->{outputDir}/lconf.identify") || die "Can't write data: $opt->{outputDir}/lconf.identify $!\n"; close(FH);

# remove incomplete identifier
unlink("$opt->{outputDir}/lconf.incomplete");

# disconnect from LDAP Server
beVerbose("LDAP DISCONNECT", "disconnected from ldap host");
$ldap->unbind();

# just modify the hashdump, if $CLIENTS if $cfg->{export}->{onlydiffs} was set
if ($cfg->{export}->{onlydiffs} && $cfg->{export}->{onlydiffs} == 1) {

    # import hashdump
    my $data; my $VAR1;
    open FILE, "<$cfg->{export}->{hashdump}" or die $!; while(<FILE>) { $data .= $_; } close FILE;
    eval($data);

    # merge hashdumps
    foreach (keys %{$CLIENTS}) {
        $VAR1->{$_} = $CLIENTS->{$_};
    }
    $CLIENTS = $VAR1;
}

# dump data to filesystem
my $data = Dumper($CLIENTS); open FILE, "+>$cfg->{export}->{hashdump}" or die $!; print FILE $data; close FILE;

# exit
EXIT:
LeaveScript($exit->{code}, $exit->{message});

# vi: sw=4 ts=4 expandtab :
