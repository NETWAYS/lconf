#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2015 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.

=head1 NAME

LConfSlaveSync.pl - Sync different Icinga cluster nodes (master/slave)

=head1 SYNOPSIS

LConfSlaveSync.pl start
                  stop

Sync different Icinga cluster nodes (master/slave)

=head1 OPTIONS

=over

=item start

Start SlaveSync Daemon

=item stop

Stop SlaveSync Daemon

=item -H|--hosts <list>

A comma separeted list of hosts

=item --localdir <path>

The local directory to sync files to

=item --remotedir <path>

The remote directory to sync files from

=item --spooldir <path>

The checkresults spool directory of Icinga

(used when directIO == 1)

=item --directIO 0|1

Save checkresults directly instead of

=item --ExtCMD <commandpipe>

Path to the Icinga commandpipe

(used when directIO == 0)

=item --pidFile <file>

Filename of the PID used for the Slave Sync daemon

=item --getInterval <seconds>

Interval to sync files from remote

=item --pushInterval <seconds>

Interval to push data into master

=item -d|--debug 0|1

Debug log

=item --debugLog <file>

Debug logfile

=item -h|--help

print help page

=item -V|--version

print plugin version

=cut

# includes
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use POSIX qw(setsid);
use LWP::Simple;
use Pod::Usage;
use File::Temp;
use threads;

# lconf includes
use lib '@SYSCONF_DIR@';
use config;

use lib '@LIB_DIR@';
use ldap;
use generate;
use misc;

# version string
my $version = '@VERSION@';

# define states
our @state = ('OK', 'WARNING', 'ERROR');

# define vars
use vars qw($cfg);

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# help and version page
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

our $opt;
GetOptions(
    "H|hosts=s"      => \$cfg->{slavesync}->{HOSTS},
    "localdir=s"     => \$cfg->{slavesync}->{localDir},
    "remotedir=s"    => \$cfg->{slavesync}->{remoteDir},
    "spooldir=s"     => \$cfg->{slavesync}->{spoolDir},
    "ExtCMD=s"       => \$cfg->{slavesync}->{ExtCMD},
    "getInterval=s"  => \$cfg->{slavesync}->{getInterval},
    "pushInterval=s" => \$cfg->{slavesync}->{pushInterval},
    "directIO=s"     => \$cfg->{slavesync}->{directIO},
    "pidFile=s"      => \$cfg->{slavesync}->{pidFile},
    "d|debug=s"      => \$cfg->{slavesync}->{debug},
    "debugLog=s"     => \$cfg->{slavesync}->{debugLog},
    "nocheck"        => \$cfg->{slavesync}->{nocheck},
    "h|help"         => \$opt->{help},
    "V|version"      => \$opt->{version}
  );

pod2usage(1) if !defined $ARGV[0];
pod2usage(1) if defined $opt->{help};
print $version."\n" if defined $opt->{version};

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# let's go!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# First of all... check if we're ready to run
LeaveScript(2, "Variable '\$cfg->{slavesync}->{HOSTS}' not set in config.pm")        if !$cfg->{slavesync}->{HOSTS};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{localDir}' not set in config.pm")     if !$cfg->{slavesync}->{localDir};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{remoteDir}' not set in config.pm")    if !$cfg->{slavesync}->{remoteDir};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{spoolDir}' not set in config.pm")     if !$cfg->{slavesync}->{spoolDir};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{ExtCMD}' not set in config.pm")       if !$cfg->{slavesync}->{ExtCMD};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{pidFile}' not set in config.pm")      if !$cfg->{slavesync}->{pidFile};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{getInterval}' not set in config.pm")  if !$cfg->{slavesync}->{getInterval};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{pushInterval}' not set in config.pm") if !$cfg->{slavesync}->{pushInterval};
LeaveScript(2, "Variable '\$cfg->{slavesync}->{debugLog}' not set in config.pm")     if !$cfg->{slavesync}->{debugLog};

# debug mode?
if (defined $cfg->{slavesync}->{debug} && $cfg->{slavesync}->{debug} == 1) {
    $opt->{verbose} = $cfg->{slavesync}->{debugLog};
}

# start or stop?
if ($ARGV[0] eq 'start') {

    # convert variable to array
    my @HOSTS = split(/\s*,\s*/, $cfg->{slavesync}->{HOSTS});

    # flush buffer
    $| = 1;

    # check few things
    if(!defined $cfg->{slavesync}->{nocheck}) {
        check($cfg->{slavesync}->{localDir}, $cfg->{slavesync}->{remoteDir}, @HOSTS);
    }

    # daemonize
    daemonize($cfg->{slavesync}->{pidFile});

    # start execution thread (direct IO or old style?)
    my %thread_handle;
    if (defined $cfg->{slavesync}->{directIO} && $cfg->{slavesync}->{directIO} == 1) {
        $thread_handle{0} = threads->create('processFilesSpoolDir', $cfg->{slavesync}->{localDir}, $cfg->{slavesync}->{spoolDir}, $cfg->{slavesync}->{pushInterval});
    } else {
        $thread_handle{0} = threads->create('processFilesExtCMD', $cfg->{slavesync}->{localDir}, $cfg->{slavesync}->{spoolDir}, $cfg->{slavesync}->{pushInterval}, $cfg->{slavesync}->{ExtCMD});
    }

    # run main function
    main($cfg->{slavesync}->{getInterval}, $cfg->{slavesync}->{localDir}, $cfg->{slavesync}->{remoteDir}, @HOSTS);

    # join thread
    $thread_handle{0}->join();
} elsif ($ARGV[0] eq 'stop') {
    killProc($cfg->{slavesync}->{pidFile});
} else {
    pod2usage(1);
}

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# functions...
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

sub check {
    my $localDir  = shift;
    my $remoteDir = shift;
    my @HOSTS     = @_;

    beVerbose('CHECK', "'$localDir' exists?");
    if (! -d $localDir) { print "ERROR: can't locate directory '$localDir'\n"; exit 1; }

    # login on each remote host possible and $remtoeDir exists?
    foreach(@HOSTS) {
        beVerbose('CHECK', "login on '$_'");
        my $cmd = "ssh -o PasswordAuthentication=no "; $cmd .= $_ ." \"ls -d $remoteDir\" 2>/dev/null";
        my $val = system($cmd);

        if ($val != 0) {
            if ($val == 512) {
                LeaveScript(2, "Can't locate directory $remoteDir on $_");
            } elsif ($val == 65280) {
                LeaveScript(2, "Can't login on $_");
            } else {
                LeaveScript(2, "Unknown error during connection / test");
            }
        }
    }
}

sub daemonize {
    my $pidFile = shift;

    chdir '/tmp' or die "Can't chdir to /tmp: $!";
    open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
    open STDOUT, '>>/dev/null' or die "Can't write to /dev/null: $!";
    open STDERR, '>>/dev/null' or die "Can't write to /dev/null: $!";

    defined(my $pid = fork) or die "Can't fork: $!";
    exit if $pid;
    setsid or die "Can't start a new session: $!";

    open(FH, ">$pidFile") || die "Can't write $pidFile: $!\n";
    print FH $$;
    close(FH);

    umask 0;
}

sub main {
    my $sleepHostThread = shift;
    my $localDir        = shift;
    my $remoteDir       = shift;
    my @HOSTS = @_;

    while(1) {
        foreach(@HOSTS) {
            getFiles($_, $localDir, $remoteDir);
        }

        beVerbose('MAIN', "sleep $sleepHostThread");
        sleep $sleepHostThread;
    }
}

sub getFiles {
    my $host      = shift;
    my $localDir  = shift;
    my $remoteDir = shift;

    beVerbose("GET FILES", "from host '$host'");
    my $cmd = "rsync --remove-sent-files -azd -e ssh $host:$remoteDir/ $localDir";
    my $val = system($cmd);

    if ($val != 0) { print "ERROR: data sync with $host failed!\n"}
}

sub killProc {
    my $pidFile = shift;

    open(FH, "<$pidFile") || die "Can't read $pidFile: $!\n";
    while(<FH>) {
        qx(kill -9 $_);
    }
    close(FH);
    qx(rm $pidFile);
}

sub processFilesSpoolDir {
    my $localDir        = shift;
    my $spoolDir        = shift;
    my $sleepExecThread = shift;

    while(1) {
        my $counter = 999999999;

        # define array
        my @FILES;

        # get files
        opendir(DIR, $localDir) || die "can't open dir $localDir: $!";
        while((my $val = readdir(DIR))) {
            push(@FILES, $val);
        }
        closedir(DIR);

        # sort stuff
        @FILES = sort(@FILES);

        # how mouch in spool?
        my $size_all = 0;
        opendir(DIR, $spoolDir) || die "can't open dir $spoolDir: $!";
        while((my $val = readdir(DIR))) {
            if (-f $val || $val =~ m/^c\w+$/) { # only count result files
                my $size_file = -s "$spoolDir/$val";
                $size_all = $size_all + $size_file;
            }
        }
        closedir(DIR);

        # re-calc
        $size_all = $size_all/1024;
        $size_all = $size_all/1024;

        # reset?
        if ($size_all <= 1) { # 1MB
            $counter = 0;
            beVerbose('PROCESS_FILES', 'reset counter => proceed!');
        }

        beVerbose('PROCESS_FILES', "start processing...");
        foreach my $file (@FILES) {
            next if ! -f "$localDir/$file"; # only files
            next if $file =~ m/^\./; # no dot files

            beVerbose('PROCESS_FILES', "processing file $file ...");
            if ($counter <= 30) { # only process X+1 spool files
                my $data;
                open(FH, "$localDir/$file" || die("Could not open file $localDir/$file"));
                while(<FH>) { $data .= $_ }
                close(FH);

                # records counter (check results)
                my $records = 0;

                # create a tempfile name to write to
                # one file per spool file
                # using a file with "." to use another template as Icinga
                my $resultfile = mktemp("c.XXXXX");

                # opening file
                beVerbose("PROCESS_FILES", "opening resultfile $resultfile");
                open (RESULT, ">>$spoolDir/$resultfile") or die "could not open resultfile: $!";

                my @lines = split(/\n/, $data);
                foreach(@lines) {
                    if ($_ =~ /PROCESS_HOST_CHECK_RESULT/) {

                        # get timestamp
                        my ($timestamp) = split(/\s/, $_);
                        $timestamp =~ m/([\d]+)/;
                        $timestamp = $1;

                        # get hostname and returncode
                        my @val = split(/;/, $_);
                        shift(@val); my $hostname = $val[0];
                        shift(@val); my $returncode = $val[0];
                        shift(@val);

                        # get message and perfdata
                        my $message = $val[0]; shift(@val);
                        foreach(@val) { $message .= ';'.$_; }

                        # map return code for hosts
                        my $mapped_returncode = 0;
                        $mapped_returncode = 2 if $returncode == 1;

                        # prepare output for writing
                        $data = '';
                        $data .= "host_name=$hostname\n";
                        $data .= "check_type=0\n";
                        $data .= "check_options=0\n";
                        $data .= "scheduled_check=0\n";
                        $data .= "reschedule_check=0\n";
                        $data .= "latency=0.000000\n";
                        $data .= "start_time=$timestamp.0\n";
                        $data .= "finish_time=$timestamp.0\n";
                        $data .= "early_timeout=0\n";
                        $data .= "exited_ok=1\n";
                        $data .= "return_code=$mapped_returncode\n";
                        $data .= "output=$message\n";
                        $data .= "\n";

                        # write to file
                        print RESULT $data;
                        $records++;
                    }

                    if ($_ =~ /PROCESS_SERVICE_CHECK_RESULT/) {

                        # get timestamp
                        my ($timestamp) = split(/\s/, $_);
                        $timestamp =~ m/([\d]+)/;
                        $timestamp = $1;

                        # get hostname, servicename and returncode
                        my @val = split(/;/, $_);
                        shift(@val); my $hostname = $val[0];
                        shift(@val); my $service = $val[0];
                        shift(@val); my $returncode = $val[0];
                        shift(@val);

                        # get message and perfdata
                        my $message = $val[0]; shift(@val);
                        foreach(@val) { $message .= ';'.$_; }

                        # prepare output for writing
                        $data = '';
                        $data .= "host_name=$hostname\n";
                        $data .= "service_description=$service\n";
                        $data .= "check_type=1\n";
                        $data .= "scheduled_check=0\n";
                        $data .= "reschedule_check=0\n";
                        $data .= "latency=0.000000\n";
                        $data .= "start_time=$timestamp.0\n";
                        $data .= "finish_time=$timestamp.0\n";
                        $data .= "return_code=$returncode\n";
                        $data .= "output=$message\n";
                        $data .= "\n";

                        # write file
                        print RESULT $data;
                        $records++;
                    }
                }

                # closing result file
                close (RESULT);

                # if we have written data
                if($records > 0) {
                    beVerbose("PROCESS_FILES", "written $records records to $resultfile");

                    # commit by writing .ok file
                    open (MYFILE, ">>$spoolDir/$resultfile.ok");
                    close (MYFILE);
                }
                else {

                    # remove tempfile we had - cause its empty
                    beVerbose("PROCESS_FILES", "removing empty $resultfile");
                    unlink("$spoolDir/$resultfile");
                }

                # remove spoolfile
                unlink("$localDir/$file");
                $counter++;
            }
            else { # $counter <= X
                # break out of spool processing
                beVerbose("PROCESS_FILES", "stop processing for now - too many files");
                last;
            }
        }
        sleep $sleepExecThread;
    }
}

sub processFilesExtCMD {
    my $localDir            = shift;
    my $spoolDir            = shift;
    my $sleepExecThread     = shift;
    my $ExternalCommandInterface = shift;

    while(1) {
        my $counter = 999999999;

        # define array
        my @FILES;

        # get files
        opendir(DIR, $localDir) || die "can't open dir $localDir: $!";
        while((my $val = readdir(DIR))) {
            push(@FILES, $val);
        }
        closedir(DIR);

        # sort stuff
        @FILES = sort(@FILES);

        # how mouch in spool?
        my $size_all = 0;
        opendir(DIR, $spoolDir) || die "can't open dir $spoolDir: $!";
        while((my $val = readdir(DIR))) {
            if ($val ne "." && $val ne "..") {
                my $size_file = -s "$spoolDir/$val";
                $size_all = $size_all + $size_file;
            }
        }
        closedir(DIR);

        # re-calc
        $size_all = $size_all/1024;
        $size_all = $size_all/1024;

        # reset?
        if ($size_all <= 1) {
            $counter = 0;
            beVerbose('PROCESS_FILES', 'reset counter => proceed!');
        }

        # execute stuff
        foreach my $val (@FILES) {
            if ($counter <= 30) {
                if ($val ne "." && $val ne ".." && $val =~ /\./) {
                    my $cmd =  "[".time()."] PROCESS_FILE;$localDir/"."$val;1";
                    qx(echo "$cmd" > $ExternalCommandInterface);
                    beVerbose('PROCESS_FILES', "proceed file '$val'");
                }
            }
            $counter++;
        }

        beVerbose('PROCESS_FILES', "sleep $sleepExecThread");
        sleep $sleepExecThread;
    }
}

# vi: sw=4 ts=4 expandtab :

