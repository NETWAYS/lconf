#!/usr/bin/perl -w

# COPYRIGHT:
#
# This software is Copyright (c) 2010 - 2015 NETWAYS GmbH
#                                <support@netways.de>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from http://www.fsf.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.fsf.org.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to NETWAYS GmbH.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# this Software, to NETWAYS GmbH, you confirm that
# you are the copyright holder for those contributions and you grant
# NETWAYS GmbH a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# Nagios and the Nagios logo are registered trademarks of Ethan Galstad.

=head1 NAME

LConfSlaveExport.pl - export an Nagios / Icinga config from LConf to a slave cluster

=head1 SYNOPSIS

LConfSlaveExport.pl  -H <name of slave server>
                     [-p <port>]
                     [-D <hashdump>]
                     -t <path to config on slave host>
                     [--format]
                     [-v]
                     [-h]
                     [-V]

Export an Nagios / Icinga config from LConf to a slave cluster

=head1 OPTIONS

=over

=item -H|--host <name of slave server>

Export config to this server

=item -p|--port <port>

Connect to target host via port <port>

=item -D|--hashdump <lconf hashdump file>

Set Lconf hashdump file location

=item -t|--target <path to config on slave host>

Target path on slave server

=item --format <1|2>

Overwrite config export format. 1 for Icinga 1.x / Nagios 3.x, 2 for Icinga 2.x

=item -v|--verbose <path to logfile>

Verbose mode. If no logfile is specified, verbose output will be printend to STDOUT

=item -o|--output <directory>

The directory where to write the configuration.

Default: <lconftmp>/<host>

=item -n|--noremote

Do not push the config to a remote host

=item -e|--exportdn <dn path below LConf>

The DN where to start the export, this overrides the config option exportDN

=item -h|--help

print help page

=item -V|--version

print plugin version

=cut

# basic perl includes
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;
use File::Basename;
use Net::LDAP;

# lconf includes
use lib '@SYSCONF_DIR@';
use config;

use lib '@LIB_DIR@';
use ldap;
use generate;
use misc;

# version string
my $version = '@VERSION@';

# define states
our @state = ('OK', 'WARNING', 'ERROR', 'UNKNOWN');

# get command-line parameters
our $opt;
GetOptions(
    "H|host=s"     => \$opt->{host},
    "p|port=s"     => \$opt->{port},
    "D|hashdump=s" => \$opt->{hashdump},
    "t|target=s"   => \$opt->{target},
    "o|output=s"   => \$opt->{outputDir},
    "n|noremote"   => \$opt->{noremote},
    "e|exportdn=s" => \$opt->{exportDN},
    "format:s"     => \$opt->{format},
    "v|verbose:s"  => \$opt->{verbose},
    "h|help"       => \$opt->{help},
    "V|version"    => \$opt->{version}
  );

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# help and version page
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# should print version?
if (defined $opt->{version}) { print $version."\n"; exit 0; }

# should print help?
if ($opt->{help} || !$opt->{noremote} && !$opt->{target}) { pod2usage(1); }

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# let's go!
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

# define vars
use vars qw($cfg);
if (defined $opt->{exportDN}) {
    $cfg->{ldap}->{baseDN} = $opt->{exportDN}.','.$cfg->{ldap}->{rootDN};
}
else {
    $cfg->{ldap}->{baseDN} = $cfg->{export}->{exportDN}.','.$cfg->{ldap}->{rootDN};
}

# override format when set via commandline
if(defined $opt->{format}) {
    $cfg->{export}->{format} = $opt->{format};
}

our $CLIENTS;
my @export;
my @hosts;

our $exit; $exit->{code} = 0; $exit->{message} = 'No errors';

# First of all... check if we're ready to run
LeaveScript(2, "Variable '\$cfg->{ldap}->{server}' not set in config.pm'") if !$cfg->{ldap}->{server};
LeaveScript(2, "Variable '\$cfg->{export}->{exportDN}' not set in config.pm'") if !$cfg->{export}->{exportDN};
LeaveScript(2, "Variable '\$cfg->{export}->{user}' not set in config.pm'") if !$cfg->{export}->{user};

# export with right user?
LeaveScript(2, "You're not user '$cfg->{export}->{user}'!") if $ENV{USER} ne $cfg->{export}->{user};

# hashdump exists?
# stay compatible - check if set via config option first
if(!defined($cfg->{export}->{hashdump})) {
    LeaveScript(2, "please specify Hashdump with --hashdump or -D") if ! $opt->{hashdump};
    LeaveScript(2, "Hashdump from '$opt->{hashdump}' does not exist!") if !-f $opt->{hashdump};
    $cfg->{export}->{hashdump} = $opt->{hashdump};
}

#
# NOW, WE'RE READY TO RUN :)
#

# import hashdump
my $data; my $VAR1;
open FILE, "<$cfg->{export}->{hashdump}" or die $!; while(<FILE>) { $data .= $_; } close FILE;
eval($data);
$CLIENTS = $VAR1;

# connect to LDAP server
our $ldap;
if ($cfg->{ldap}->{binddn} && $cfg->{ldap}->{bindpw}) {
    $ldap = LDAPconnect('auth');
} else {
    $ldap = LDAPconnect();
}

# define target hosts / host is set?
if (!defined $opt->{host}) {

    # search after all hosts
    my $result;
    $result = LDAPsearch($ldap, $cfg->{ldap}->{baseDN}, "sub", "description=LCONF->EXPORT->HOST*");
    foreach my $host (keys %{$result}) { $result->{$host}->{description} =~ m/^LCONF->EXPORT->HOST[\s=_-]*([-_\w\d]+)/; push(@hosts, $1); }

    $result = LDAPsearch($ldap, $cfg->{ldap}->{baseDN}, "sub", "description=LCONF->EXPORT->CLUSTER*");
    foreach my $host (keys %{$result}) { $result->{$host}->{description} =~ m/^LCONF->EXPORT->CLUSTER[\s=_-]*([-_\w\d]+)/; push(@hosts, $1); }
} else {
    push(@hosts, $opt->{host});
}

# get the whole config from ldap
my $CONFIG = LDAPsearch($ldap, $cfg->{ldap}->{rootDN}, "sub", "objectclass=*");

# proceed config for each host
foreach my $host (@hosts) {

    # re-map var
    $opt->{host} = $host;

    # get global tree's
    my $exportGLOBAL = LDAPsearch($ldap, $cfg->{ldap}->{baseDN}, "sub", "description=LCONF->EXPORT->GLOBAL");
    @export = addPaths($exportGLOBAL, @export) if defined $exportGLOBAL;

    # get slaves cluster tree's
    # LCONF->EXPORT->CLUSTER and LCONF->EXPORT->HOST. Both will work...
    my $exportSLAVE = LDAPsearch($ldap, $cfg->{ldap}->{baseDN}, "sub", "description=LCONF->EXPORT->CLUSTER*$opt->{host}");
    @export = addPaths($exportSLAVE, @export) if defined $exportSLAVE;
    $exportSLAVE = LDAPsearch($ldap, $cfg->{ldap}->{baseDN}, "sub", "description=LCONF->EXPORT->HOST*$opt->{host}");
    @export = addPaths($exportSLAVE, @export) if defined $exportSLAVE;

    # delete useless items from $CLIENTS
    foreach my $client (keys %{$CLIENTS}) {
        my $delete = 1;
        foreach(@export) { if ($client =~ /$_/) { $delete = 0; } }
        delete $CLIENTS->{$client} if $delete == 1;
    }

    # modifications?
    foreach my $client (keys %{$CLIENTS}) {

        # delete excluded hosts
        if (defined $CLIENTS->{$client}->{description}) {
            foreach my $desc (keys %{$CLIENTS->{$client}->{description}}) {

                # modify hostattribute if LCONF->EXPORT->MODIFY->HOST is set
                if ($desc =~ /^LCONF->EXPORT->MODIFY->HOST/) {
                    $desc =~ m/^LCONF->EXPORT->MODIFY->HOST\s+([a-zA-Z]+)\s+(.*)/;
                    $CLIENTS->{$client}->{$1} = $2;
                    delete $CLIENTS->{$client}->{$1} if $2 eq '#undef';
                }

                # delete host if LCONF->EXPORT->EXCLUDE is set
                delete $CLIENTS->{$client} if $desc eq 'LCONF->EXPORT->EXCLUDE';
            }
        }

        foreach my $service (keys %{$CLIENTS->{$client}->{SERVICES}}) {
            if (defined $CLIENTS->{$client}->{SERVICES}->{$service}->{description}) {
                foreach my $desc (keys %{$CLIENTS->{$client}->{SERVICES}->{$service}->{description}}) {

                    # modify serviceattribute if LCONF->EXPORT->MODIFY->HOST is set
                    if ($desc =~ /^LCONF->EXPORT->MODIFY->SERVICE/) {
                        $desc =~ m/^LCONF->EXPORT->MODIFY->SERVICE\s+([a-zA-Z]+)\s+(.*)/;
                        $CLIENTS->{$client}->{SERVICES}->{$service}->{$1} = $2;
                        delete $CLIENTS->{$client}->{SERVICES}->{$service}->{$1} if $2 eq '#undef';
                    }

                    # delete service if LCONF->EXPORT->EXCLUDE is set
                    delete $CLIENTS->{$client}->{SERVICES}->{$service} if $desc eq 'LCONF->EXPORT->EXCLUDE';
                }
            }
        }
    }

    # create tmp target
    if(!defined $opt->{outputDir}) {
        $opt->{outputDir} = $cfg->{export}->{tmpdir}.'/'.$opt->{host}.'/';
    }
    mkdir("$opt->{outputDir}") if !-d $opt->{outputDir};

    # clean tmp target
    qx(rm -r $opt->{outputDir}/*) if -f "$opt->{outputDir}/lconf.identify";

    # create identifier
    open(FH, ">$opt->{outputDir}/lconf.identify") || die "Can't write data: $opt->{outputDir}/lconf.identify $!\n"; close(FH);

    # copy defaults locally
    if(defined($cfg->{export}->{format}) && $cfg->{export}->{format} == 2) {
        beVerbose("LOCAL COPY", "cp @SYSCONF_DIR@/default-templates.conf $opt->{outputDir}/");
        qx(cp @SYSCONF_DIR@/default-templates.conf $opt->{outputDir}/);
    } else {
        beVerbose("LOCAL COPY", "cp @SYSCONF_DIR@/default-templates.cfg $opt->{outputDir}/");
        qx(cp @SYSCONF_DIR@/default-templates.cfg $opt->{outputDir}/);
    }

    # create dirs and write config
    createDirs($cfg->{ldap}->{baseDN}, $opt->{outputDir});
    mkdir("$opt->{outputDir}/hostgroups/");
    mkdir("$opt->{outputDir}/servicegroups/");
    foreach(@export) {
        genTimeperiods($CONFIG, $_);
        genCommands($CONFIG, $_);
        genContacts($CONFIG, $_);
        genContactgroups($CONFIG, $_);
        genHostgroups($CONFIG, $CLIENTS, $_);
        genServicegroups($CONFIG, $CLIENTS, $_);
    }

    foreach my $client (keys %{$CLIENTS}) {
        genHostConfig($CONFIG, $CLIENTS, $client);
    }

    # disconnect from LDAP Server
    $ldap->unbind();

    #
    # NOW, START WORKING ON TARGET SERVER's REMOTE DIR
    #

    if(!defined $opt->{noremote}) {

        # remote dir exists?
        checkRemoteDir($opt->{host}, $opt->{target}, $opt->{port});

        # copy config to client
        my $cmd;
        if (defined $opt->{port}) {
            $cmd = "rsync -zai -e 'ssh -p $opt->{port}' --stats --checksum --omit-dir-times --delay-updates --delete-after $opt->{outputDir}/* $opt->{host}:$opt->{target}";
        } else {
            $cmd = "rsync -zai -e ssh --stats --checksum --omit-dir-times --delay-updates --delete-after $opt->{outputDir}/* $opt->{host}:$opt->{target}";
        }
        beVerbose("COPY", $cmd);
        qx($cmd);

        # reload Icinga (2) on slave (requires passwordless sudo for that command)
        my $binary = "icinga";
        if(defined($cfg->{export}->{format}) && $cfg->{export}->{format} == 2) {
            $binary = "icinga2";
        }

        if (defined $opt->{port}) {
            $cmd = "ssh -p $opt->{port} $opt->{host} 'sudo /etc/init.d/$binary reload'";
        } else {
            $cmd = "ssh $opt->{host} 'sudo /etc/init.d/$binary reload'";
        }

        #beVerbose("RELOAD", $cmd);
        #my $result = qx($cmd);
        #print $result;
    }
}

# exit
EXIT:
LeaveScript($exit->{code}, $exit->{message});

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #
# functions
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * #

sub addPaths {
    my $result = shift;
    my @to_return = @_;

    foreach(keys %{$result}) { push(@to_return, $_); }

    return @to_return;
}

# vi: sw=4 ts=4 expandtab :

